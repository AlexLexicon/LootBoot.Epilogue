namespace LootBoot.Epilogue.Engine;
public struct Speed
{
    public Speed(double distancePerSecond) => DistancePerSecond = distancePerSecond;
    public double DistancePerSecond { get; init; }
    public double Distance => DistancePerSecond * GameCore.SecondDelta;
    public override bool Equals(object obj) => obj is Speed b && DistancePerSecond == b.DistancePerSecond;
    public bool Equals(int value) => DistancePerSecond == value;
    public bool Equals(uint value) => DistancePerSecond == value;
    public bool Equals(float value) => DistancePerSecond == value;
    public bool Equals(double value) => DistancePerSecond == value;
    public override int GetHashCode() => DistancePerSecond.GetHashCode();
    public static implicit operator int(Speed speed) => (int)speed.DistancePerSecond;
    public static implicit operator uint(Speed speed) => (uint)speed.DistancePerSecond;
    public static implicit operator float(Speed speed) => (float)speed.DistancePerSecond;
    public static implicit operator double(Speed speed) => speed.DistancePerSecond;
    public static implicit operator Speed(int value) => new() { DistancePerSecond = value };
    public static implicit operator Speed(uint value) => new() { DistancePerSecond = value };
    public static implicit operator Speed(float value) => new() { DistancePerSecond = value };
    public static implicit operator Speed(double value) => new() { DistancePerSecond = value };
    public static Speed operator +(Speed a) => a;
    public static Speed operator +(Speed a, Speed b) => new() { DistancePerSecond = a.DistancePerSecond + b.DistancePerSecond };
    public static Speed operator +(Speed a, int distancePerSecond) => new() { DistancePerSecond = a.DistancePerSecond + distancePerSecond };
    public static Speed operator +(Speed a, uint distancePerSecond) => new() { DistancePerSecond = a.DistancePerSecond + distancePerSecond };
    public static Speed operator +(Speed a, float distancePerSecond) => new() { DistancePerSecond = a.DistancePerSecond + distancePerSecond };
    public static Speed operator +(Speed a, double distancePerSecond) => new() { DistancePerSecond = a.DistancePerSecond + distancePerSecond };
    public static Speed operator +(int distancePerSecond, Speed a) => new() { DistancePerSecond = distancePerSecond + a.DistancePerSecond };
    public static Speed operator +(uint distancePerSecond, Speed a) => new() { DistancePerSecond = distancePerSecond + a.DistancePerSecond };
    public static Speed operator +(float distancePerSecond, Speed a) => new() { DistancePerSecond = distancePerSecond + a.DistancePerSecond };
    public static Speed operator +(double distancePerSecond, Speed a) => new() { DistancePerSecond = distancePerSecond + a.DistancePerSecond };
    public static Speed operator -(Speed a) => new() { DistancePerSecond = -a };
    public static Speed operator -(Speed a, Speed b) => new() { DistancePerSecond = a.DistancePerSecond - b.DistancePerSecond };
    public static Speed operator -(Speed a, int distancePerSecond) => new() { DistancePerSecond = a.DistancePerSecond - distancePerSecond };
    public static Speed operator -(Speed a, uint distancePerSecond) => new() { DistancePerSecond = a.DistancePerSecond - distancePerSecond };
    public static Speed operator -(Speed a, float distancePerSecond) => new() { DistancePerSecond = a.DistancePerSecond - distancePerSecond };
    public static Speed operator -(Speed a, double distancePerSecond) => new() { DistancePerSecond = a.DistancePerSecond - distancePerSecond };
    public static Speed operator -(int distancePerSecond, Speed a) => new() { DistancePerSecond = distancePerSecond - a.DistancePerSecond };
    public static Speed operator -(uint distancePerSecond, Speed a) => new() { DistancePerSecond = distancePerSecond - a.DistancePerSecond };
    public static Speed operator -(float distancePerSecond, Speed a) => new() { DistancePerSecond = distancePerSecond - a.DistancePerSecond };
    public static Speed operator -(double distancePerSecond, Speed a) => new() { DistancePerSecond = distancePerSecond - a.DistancePerSecond };
    public static bool operator ==(Speed a, Speed b) => a.Equals(b);
    public static bool operator ==(Speed a, int distancePerSecond) => a.Equals(distancePerSecond);
    public static bool operator ==(Speed a, uint distancePerSecond) => a.Equals(distancePerSecond);
    public static bool operator ==(Speed a, float distancePerSecond) => a.Equals(distancePerSecond);
    public static bool operator ==(Speed a, double distancePerSecond) => a.Equals(distancePerSecond);
    public static bool operator ==(int distancePerSecond, Speed a) => a.Equals(distancePerSecond);
    public static bool operator ==(uint distancePerSecond, Speed a) => a.Equals(distancePerSecond);
    public static bool operator ==(float distancePerSecond, Speed a) => a.Equals(distancePerSecond);
    public static bool operator ==(double distancePerSecond, Speed a) => a.Equals(distancePerSecond);
    public static bool operator !=(Speed a, Speed b) => !(a == b);
    public static bool operator !=(Speed a, int distancePerSecond) => !(a == distancePerSecond);
    public static bool operator !=(Speed a, uint distancePerSecond) => !(a == distancePerSecond);
    public static bool operator !=(Speed a, float distancePerSecond) => !(a == distancePerSecond);
    public static bool operator !=(Speed a, double distancePerSecond) => !(a == distancePerSecond);
    public static bool operator !=(int distancePerSecond, Speed a) => !(distancePerSecond == a);
    public static bool operator !=(uint distancePerSecond, Speed a) => !(distancePerSecond == a);
    public static bool operator !=(float distancePerSecond, Speed a) => !(distancePerSecond == a);
    public static bool operator !=(double distancePerSecond, Speed a) => !(distancePerSecond == a);
    public static bool operator >(Speed a, Speed b) => a.DistancePerSecond > b.DistancePerSecond;
    public static bool operator >(Speed a, int distancePerSecond) => a.DistancePerSecond > distancePerSecond;
    public static bool operator >(Speed a, uint distancePerSecond) => a.DistancePerSecond > distancePerSecond;
    public static bool operator >(Speed a, float distancePerSecond) => a.DistancePerSecond > distancePerSecond;
    public static bool operator >(Speed a, double distancePerSecond) => a.DistancePerSecond > distancePerSecond;
    public static bool operator >(int distancePerSecond, Speed a) => distancePerSecond > a.DistancePerSecond;
    public static bool operator >(uint distancePerSecond, Speed a) => distancePerSecond > a.DistancePerSecond;
    public static bool operator >(float distancePerSecond, Speed a) => distancePerSecond > a.DistancePerSecond;
    public static bool operator >(double distancePerSecond, Speed a) => distancePerSecond > a.DistancePerSecond;
    public static bool operator >=(Speed a, Speed b) => a.DistancePerSecond >= b.DistancePerSecond;
    public static bool operator >=(Speed a, int distancePerSecond) => a.DistancePerSecond >= distancePerSecond;
    public static bool operator >=(Speed a, uint distancePerSecond) => a.DistancePerSecond >= distancePerSecond;
    public static bool operator >=(Speed a, float distancePerSecond) => a.DistancePerSecond >= distancePerSecond;
    public static bool operator >=(Speed a, double distancePerSecond) => a.DistancePerSecond >= distancePerSecond;
    public static bool operator >=(int distancePerSecond, Speed a) => distancePerSecond >= a.DistancePerSecond;
    public static bool operator >=(uint distancePerSecond, Speed a) => distancePerSecond >= a.DistancePerSecond;
    public static bool operator >=(float distancePerSecond, Speed a) => distancePerSecond >= a.DistancePerSecond;
    public static bool operator >=(double distancePerSecond, Speed a) => distancePerSecond >= a.DistancePerSecond;
    public static bool operator <(Speed a, Speed b) => a.DistancePerSecond < b.DistancePerSecond;
    public static bool operator <(Speed a, int distancePerSecond) => a.DistancePerSecond < distancePerSecond;
    public static bool operator <(Speed a, uint distancePerSecond) => a.DistancePerSecond < distancePerSecond;
    public static bool operator <(Speed a, float distancePerSecond) => a.DistancePerSecond < distancePerSecond;
    public static bool operator <(Speed a, double distancePerSecond) => a.DistancePerSecond < distancePerSecond;
    public static bool operator <(int distancePerSecond, Speed a) => distancePerSecond < a.DistancePerSecond;
    public static bool operator <(uint distancePerSecond, Speed a) => distancePerSecond < a.DistancePerSecond;
    public static bool operator <(float distancePerSecond, Speed a) => distancePerSecond < a.DistancePerSecond;
    public static bool operator <(double distancePerSecond, Speed a) => distancePerSecond < a.DistancePerSecond;
    public static bool operator <=(Speed a, Speed b) => a.DistancePerSecond <= b.DistancePerSecond;
    public static bool operator <=(Speed a, int distancePerSecond) => a.DistancePerSecond <= distancePerSecond;
    public static bool operator <=(Speed a, uint distancePerSecond) => a.DistancePerSecond <= distancePerSecond;
    public static bool operator <=(Speed a, float distancePerSecond) => a.DistancePerSecond <= distancePerSecond;
    public static bool operator <=(Speed a, double distancePerSecond) => a.DistancePerSecond <= distancePerSecond;
    public static bool operator <=(int distancePerSecond, Speed a) => distancePerSecond <= a.DistancePerSecond;
    public static bool operator <=(uint distancePerSecond, Speed a) => distancePerSecond <= a.DistancePerSecond;
    public static bool operator <=(float distancePerSecond, Speed a) => distancePerSecond <= a.DistancePerSecond;
    public static bool operator <=(double distancePerSecond, Speed a) => distancePerSecond <= a.DistancePerSecond;
}
